Домашнее задание №6 (Helpdesk API Testing)
Before
1.Создать в проекте с домашними заданиями новую ветку без истории коммитов, например api-master.
git checkout --orphan ИМЯ_ВЕТКИ
2.Удалить ненужные файлы (если есть), и сделать пустой коммит
git commit --allow-empty -m "СООБЩЕНИЕ КОММИТА"
затем выполнить push на удаленный репозиторий.
3.Из текущего состояния создать ветку api-develop.
4.Скопировать файлы и папки из проекта-шаблона https://gitlab.com/lanit-at-school/homework-examples/helpdesk-api-test
Задание
Протестировать систему учета заявок HelpDesk, используя API.
Сервис HelpDesk: https://at-sandbox.workbench.lanit.ru/
Документация API: https://at-sandbox.workbench.lanit.ru/swagger/
Тест-кейсы:
•	Создание тикета с высоким приоритетом.
•	Негативная проверка: перевода статуса тикета из "Закрыт" в "Открыт".
Данные тестовые сценарии должны быть написаны, если вы делали домашнее задание к курсу "Теория тестирования для АТ", используя руководство пользователя HelpDesk (https://docs.google.com/document/d/13qUAkmFGj3jV3hEnqMlAxitKblA_BgSTKprwEW-Yg88).
Пример API тестов: https://gitlab.com/lanit-at-school/homework-examples/petstore-api-test
Пример взаимодействия с API сервиса Petstore (онлайн магазин домашних животных). В примере в пакете org.example.api.pet проверяются методы раздела PET из документации API для Petstore (https://petstore.swagger.io/).
Задачи:
1.Добавить в класс Ticket поля, соответствующие документации API. Наименования полей должны совпадать с наименованиями из документации. Это нужно для правильной сериализации объектов.
2.Написать реализацию методов шаблона в классах BaseTest, CreateTicketTest, UpdateTicketTest.
3.Выполнить commit и push, затем создать merge request ветки api-develop в ветку api-master. Убедиться, что изменения (diff) соответствуют проделанной работе.
Примечание
В системе Helpdesk присутствуют специально добавленные дефекты (баги), поэтому не все тест кейсы могут проходить успешно.
Требования
Использовать версию Java - 8, если преподаватель не указал иное.
Тестовые методы должны отправлять HTTP запросы с помощью библиотеки RestAssured.
